#!/usr/bin/env python
#
# SPDX-FileCopyrightText: 2024 Espressif Systems (Shanghai) CO LTD
# SPDX-License-Identifier: Apache-2.0

"""
Check if BSP's README.md contains list of dependencies
"""

import os
import sys
import argparse
from idf_component_tools.manifest import ManifestManager
from py_markdown_table.markdown_table import markdown_table
from typing import Any

DEPENDENCIES_START = '<!-- Autogenerated start: Dependencies -->\n'
DEPENDENCIES_END = '<!-- Autogenerated end: Dependencies -->\n'
DEPENDENCIES_HEADER = '### Dependencies\n'
ESP_REGISTRY_URL = 'https://components.espressif.com/components/'


def get_dependencies_table(manifest):
    """
    Get markdown formatted table of manifest's dependencies
    """
    table = DEPENDENCIES_HEADER
    table_data = [
        {
            "component":item.name,
            "version":item.version_spec,
        } for item in manifest.dependencies]
    for item in table_data:
        if item["component"] != "idf":
            item_name = item["component"]
            item["component"] = "[" + item_name + "](" + ESP_REGISTRY_URL + item_name + ")"
    markdown = markdown_table(table_data).set_params(row_sep='markdown', quote=False).get_markdown()
    table += markdown + '\n'
    return table


def check_bsp_readme(file: str) -> Any:
    bsp_path = os.path.dirname(file)  # File can be idf_component.yml or README.md
    # Get list of dependencies of this BSP
    manager = ManifestManager(bsp_path, 'bsp')
    table = get_dependencies_table(manager.load())

    with open(os.path.join(bsp_path, 'README.md'), 'r+') as readme:
        content = readme.readlines()
        # Find or create 'Dependencies section' in the README.md
        try:
            start_idx = content.index(DEPENDENCIES_START)
            end_idx = content.index(DEPENDENCIES_END)
            if set(table.splitlines()) <= set([line[:-1] for line in content]):
                # The table exists and is correct, we can return here
                return 0
            else:
                print("[" + bsp_path + "] Incorrect dependencies table, updating...")
                del content[start_idx + 1:end_idx]
        except ValueError:
            print("[" + bsp_path + "] First run on this file. Writing dependencies section...")
            content.append(DEPENDENCIES_START)
            content.append(DEPENDENCIES_END)
            start_idx = content.index(DEPENDENCIES_START)

        # Write the generated table to the README.md
        content.insert(start_idx + 1, table)
        readme.truncate(0)
        readme.seek(0, os.SEEK_SET)
        readme.writelines(content)
    # We have modified the README.md
    return 1


def check_all_bsps():
    parser = argparse.ArgumentParser()
    parser.add_argument('filenames', nargs='*', help='Filenames to check.')
    args = parser.parse_args()
    ret = 0
    for f in args.filenames:
        ret += check_bsp_readme(f)
    return ret


if __name__ == '__main__':
    os.environ["IDF_VERSION"] = "5.3.0"  # Let's assume IDF v5.3.0 for optional dependencies
    sys.exit(check_all_bsps())
